function export_csv = export_csv(md,flowline)
%UNTITLED Summary of this function goes here
%   Detailed explanation goes here

data = [];
vel_avg = [];
vel_max = [];
distance = [];
time = [];

if md.mesh.dimension == 2
    resolution = 100;
else
    resolution = [100 100];
end

%Calculate the front of the glacier along the flowline
[elementsL,xL,yL,zL,sL,hL]=SectionValues(md,md.results.TransientSolution(1).Surface,flowline,resolution);
for i = [1:length(sL)]
    if hL(i) > 1
        distance0 = sL(i); %Intital start value
        break
    end
end


for i = 1:length(md.results.TransientSolution)
    ice_area = find(md.results.TransientSolution(i).MaskIceLevelset<0);

    time = [time md.results.TransientSolution(i).time];
    vel_avg = [vel_avg mean(md.results.TransientSolution(i).Vel(ice_area))];
    vel_max = [vel_max max(md.results.TransientSolution(i).Vel)];


    [elementsL,xL,yL,zL,sL,hL]=SectionValues(md,md.results.TransientSolution(i).Surface,flowline,resolution);
    for i = [1:length(sL)]
        if hL(i) > 1
            distance = [distance (distance0-sL(i))];
            break
        end
    end
end

data = struct('time',[]);
data = repmat(data,length(md.results.TransientSolution),1);

[data.time] = deal(num2cell(time));


% data.vel_max = vel_max';
% data.vel_avg = vel_avg';
% data.terminus_change = distance';
% 
% [data.vel_max] = vel_max{:};


writetable(struct2table(data), ['./Outputs/' char(md.miscellaneous.name) '.csv'])

